
/**
 * Monitor - use with extreme caution (http://redis.io/commands/monitor).
 */

if (false && options.monitor) { // taking monitor off the table for now
  // create a new redis client since monitor mode is one of the special modes
  var mc = this.monitorClient = redis.createClient(options.port, options.host, options)
    , monitorCache = []

  mc.monitor(function (err, res) {
    if (err) return logger.error(err)
    debug('Entering monitoring mode.')
  })

  mc.on('monitor', function (time, args) {
    if (args[0] !== 'info') {
      var intervalSec = self.rti.interval/1000
        , delta = Math.round(time) - Math.round(lastUpdate/1000) // seconds

      monitorCache.push(args)

      if (!lastUpdate || delta > intervalSec) {
        self._updateMonitor(monitorCache, function (err) {
          if (!err) monitorCache = []
        })
      }
    }
  })
}
